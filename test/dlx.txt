from env import mem as memory 0
global sol as mut i32
global sollim as mut i32
global solpcs as mut i32
global solpcslim as mut i32
global tried as mut i64
global maxtry as mut i64
global maxdepth as mut i32
global stack as mut i32
global sp as mut i32
from env import debug as func debug param i32 and i32

; node structure:
;   offset 0: up
;   offset 4: down
;   offset 8: left
;   offset 12: right
;   offset 16: row
;   offset 20: col
;   offset 24: size
;   offset 28: value
;   offset 32: min
;   offset 36: max

func unlinkrow param node as i32 and includen as i32
local n as i32 and ncol as i32 and up as i32 and down as i32 and updown as i64 and l32 as i64
code
  ; e = n;
  get node set n
  ; n = includeN ? n : n.r;
  get includen ieqz if
    get n iload align 4 off 12 set n
  end
iconst 32 ui2l set l32

  block lbl b loop lbl w
    get n get node ieq brif b
    ;get n iload align 4 off 0 set up
    ;get n iload align 4 off 4 set down
get n lload align 8 set updown
get updown l2i set up
get updown get l32 lshru l2i set down
    get up get down istore align 4 off 4
    get down get up istore align 4 off 0
    get n iload align 4 off 20 set ncol
    get n iload align 4 off 12 set n
    get ncol get ncol iload align 4 off 24 iconst 1 isub istore off 24
    br w
  end end
end

func relinkrow param n as i32 and includen as i32
local e as i32 and ncol as i32 and some as i64 and l32 as i64
code
  ; e = n;
  get n set e
  ; n = includeN ? n : n.r;
  get includen ieqz if
    get n iload align 4 off 12 set n
  end
iconst 32 ui2l set l32

  ; while (n !== e) {
  block lbl b loop lbl w
    get n get e ieq brif b
    
    ; n.u.d = n;
    ;get n iload align 4 off 0 get n istore align 4 off 4
    ; n.d.u = n;
    ;get n iload align 4 off 4 get n istore align 4 off 0
get n lload align 8 set some
get some l2i get n istore align 4 off 4
get some get l32 lshru l2i get n istore align 4 off 0
    ; n.col.size += 1;
    get n iload align 4 off 20 set ncol
    get ncol get ncol iload align 4 off 24 iconst 1 iadd istore align 4 off 24
    ; n = n.r;
    get n iload align 4 off 12 set n
    
  ; }
    br w
  end end
end

func cover param n as i32
local n2 as i32 and c2 as i32 and n3 as i32
code
  get n set n2
  loop lbl do
    get n2 iload align 4 off 20 set c2
    get c2 get c2 iload align 4 off 28 iconst 1 iadd teelocal n3 istore align 4 off 28
    get n3 get c2 iload align 4 off 36 ieq if
      get c2 iload align 4 off 8 get c2 iload align 4 off 12 istore align 4 off 12
      get c2 iload align 4 off 12 get c2 iload align 4 off 8 istore align 4 off 8
      get c2 iload align 4 off 4 set n3
      block lbl b loop lbl w
        get n3 get c2 ieq brif b
          get n3 iconst 0 call unlinkrow
          get n3 iload align 4 off 4 set n3
        br w
      end end
    end
    get n2 iload align 4 off 12 set n2
    get n2 get n ine brif do
  end
end

func uncover param n as i32
local n2 as i32 and c2 as i32 and n3 as i32 and size as i32
code
  get n set n2
  loop lbl do
    get n2 iload align 4 off 8 set n2
    get n2 iload align 4 off 20 set c2
    get c2 iload align 4 off 28 teelocal size get c2 iload align 4 off 36 ieq if
      get c2 iload align 4 off 0 set n3
      block lbl b loop lbl w
        get n3 get c2 ieq brif b
          get n3 iconst 0 call relinkrow
          get n3 iload align 4 off 0 set n3
        br w
      end end
      get c2 iload align 4 off 8 get c2 istore align 4 off 12
      get c2 iload align 4 off 12 get c2 istore align 4 off 8
    end
    get c2 get size iconst 1 isub istore align 4 off 28
    get n2 get n ine brif do
  end
  get n iconst 1 call unlinkrow
end

func addsolution result i32
code
  getglobal sol iconst 1 iadd setglobal sol
  iconst 1
end

func minfit param root as i32 result i32
local col as i32 and c as i32 and minfit as i32 and value as i32 and min as i32 and size as i32
code
  get root iload align 4 off 12 set col
  iconst m1 set minfit
  block lbl b loop lbl w
    get col get root ieq brif b
    block lbl f2
      get col iload align 4 off 28 set value
      ; satisfied
      ;get value get col iload align 4 off 36 igts if
      ;  iconst m1 return
      ;end
      get value get col iload align 4 off 32 teelocal min iges brif f2
      
      ; unusable
      get value get col iload align 4 off 24 teelocal size iadd get min ilts
      if iconst m1 return end
      
      get size get minfit iltu if
        get col set c
        get size set minfit
      end
    end
    get col iload align 4 off 12 set col
    br w
  end end
  iconst m2 get c get minfit iconst m1 ieq select
end

func dlx export dlx param root as i32 result i32
local c as i32 and value as i32 and solfull as i32 and n as i32
code
  iconst 0 set solfull
  block lbl b loop lbl w
    ; count tried
    get solfull if iconst 2 return end
    getglobal tried getglobal maxtry leq if iconst 1 return end
    getglobal tried iconst 1 ui2l ladd setglobal tried
    
    ; find minimum fit
    
    get root call minfit set c
    get c iconst m2 ieq if
      ; solved!
      call addsolution set solfull
      iconst m1 set c
    end
    get c iconst m1 ieq if
      ; unusable or pop stack
      getglobal sp getglobal stack ieq brif b
      getglobal sp iconst 8 isub setglobal sp
      getglobal sp iload align 4 off 0 set n
      getglobal sp iload align 4 off 4 set c
      
      ; recover
      get n call uncover
      get n iload align 4 off 4 set n
    else
      get c iload align 4 off 4 set n
    end
    
    ; get deeper
    block lbl b2 loop lbl w2
      get n get c ine brif b2
      get c iload align 4 off 0 set n
      block lbl b3 loop lbl w3
        get n get c ieq brif b3
        get n iconst 1 call relinkrow
        get n iload align 4 off 0 set n
        br w3
      end end
      
      ; pop stack
      getglobal sp getglobal stack ieq brif b
      getglobal sp iconst 8 isub setglobal sp
      getglobal sp iload align 4 off 0 set n
      getglobal sp iload align 4 off 4 set c
      
      ; recover
      get n call uncover
      get n iload align 4 off 4 set n
      br w2
    end end
    
    ; push stack
    getglobal sp get n istore align 4 off 0
    getglobal sp get c istore align 4 off 4
    getglobal sp iconst 8 iadd setglobal sp
    get n call cover
    br w
  end end
  iconst 0
end

func setstack export setstack param sp as i32
code
  get sp setglobal sp
  get sp setglobal stack
end

func setsolspace export setsolspace
param sol as i32 and sollim as i32 and solpcs as i32 and solpcslim as i32
code
  get sol setglobal sol
  get sollim setglobal sollim
  get solpcs setglobal solpcs
  get solpcslim setglobal solpcslim
end

func getsol export getsol result i32
code
  getglobal sol
end

func settry export settry param tried as f64 and maxtry as f64
code
  get tried d2sl setglobal tried
  get maxtry d2sl setglobal maxtry
end

func gettried export gettried result f64
code
  getglobal tried sl2d
end

func setright param left as i32 and right as i32
code
  get left get right istore align 4 off 12
  get right iload align 4 off 8 get left istore align 4 off 12
  get left get right iload align 4 off 8 istore align 4 off 8
  get right get left istore align 4 off 8
end

func setdown param up as i32 and down as i32
code
  get up get down istore align 4 off 4
  get down iload align 4 off 0 get up istore align 4 off 4
  get up get down iload align 4 off 0 istore align 4 off 0
  get down get up istore align 4 off 0
end

func setroot export setroot param addr as i32
code
  get addr get addr istore align 4 off 0 ; up
  get addr get addr istore align 4 off 4 ; down
  get addr get addr istore align 4 off 8 ; left
  get addr get addr istore align 4 off 12 ; right
  get addr iconst 0 istore align 4 off 16 ; row
  get addr iconst 0 istore align 4 off 20 ; col
  
  get addr iconst 0 istore align 4 off 24 ; size
  get addr iconst 0 istore align 4 off 28 ; value
  get addr iconst 0 istore align 4 off 32 ; min
  get addr iconst 0 istore align 4 off 36 ; max
end

func addfirstcell export addfirstcell param addr as i32 and col as i32 and id as i32
code
  get addr get col call setdown ; up, down
  get addr get addr istore align 4 off 8 ; left
  get addr get addr istore align 4 off 12 ; right
  get addr get id istore align 4 off 16 ; row
  get addr get col istore align 4 off 20 ; col
  get col get col iload align 4 off 24 iconst 1 iadd istore align 4 off 24
end

func addcolumn export addcolumn param root as i32 and addr as i32 and id as i32
  and min as i32 and max as i32
code
  get addr get addr istore align 4 off 0 ; up
  get addr get addr istore align 4 off 4 ; down
  get min iconst 0 igts if
    get addr get root call setright ; left, right
  else
    get addr get addr istore align 4 off 8 ; left
    get addr get addr istore align 4 off 12 ; right
  end
  get addr get root istore align 4 off 16 ; row
  get addr get id istore align 4 off 20 ; col
  
  get addr iconst 0 istore align 4 off 24 ; size
  get addr iconst 0 istore align 4 off 28 ; value
  get addr get min istore align 4 off 32 ; min
  get addr get max istore align 4 off 36 ; max
end

func addcell export addcell param addr as i32 and prevcell as i32 and col as i32 and rowid as i32
code
  get addr get col call setdown ; up, down
  get addr get prevcell call setright ; left, right
  get addr get rowid istore align 4 off 16 ; row
  get addr get col istore align 4 off 20 ; col
  get col get col iload align 4 off 24 iconst 1 iadd istore align 4 off 24
end
